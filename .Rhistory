samples<-90
pmean=1/lambda
psd=1/lambda
ssd=psd/sqrt(samples)
rdata <- replicate(noofreps, rexp(samples, lambda))
expmeans <- (colMeans(rdata)-pmean)/ssd
mean<-mean(expmeans)
hist(expmeans, prob=TRUE)
curve(dnorm(x, mean=0, sd=1), add=TRUE)
ll <- expmeans - qnorm(0.975) * sqrt(1/samples)
ul <- expmeans + qnorm(0.975) * sqrt(1/samples)
mean(ll < lambda & ul > lambda)
lhats[1:5]
ll[1:5]
ul[1:5]
sqrt(1/nosim)
require(ggplot2)
lambda<-.2
noofreps<-1000
samples<-90
pmean=1/lambda
psd=1/lambda
ssd=psd/sqrt(samples)
coverage <- sapply(samples, function(samples) {
rdata <- replicate(noofreps, rexp(samples, lambda))
expmeans <- (colMeans(rdata)-pmean)/ssd
mean<-mean(expmeans)
#hist(expmeans, prob=TRUE)
#curve(dnorm(x, mean=0, sd=1), add=TRUE)
ll <- expmeans - qnorm(0.975) * ssd
ul <- expmeans + qnorm(0.975) * ssd
mean(ll < 0 & ul > 0)
})
coverage
require(ggplot2)
lambda<-.2
noofreps<-1000
samples<-c(10, 40, 90)
pmean=1/lambda
psd=1/lambda
ssd=psd/sqrt(samples)
coverage <- sapply(samples, function(samples) {
rdata <- replicate(noofreps, rexp(samples, lambda))
expmeans <- (colMeans(rdata)-pmean)/ssd
mean<-mean(expmeans)
#hist(expmeans, prob=TRUE)
#curve(dnorm(x, mean=0, sd=1), add=TRUE)
ll <- expmeans - qnorm(0.975) * ssd
ul <- expmeans + qnorm(0.975) * ssd
mean(ll < 0 & ul > 0)
})
coverage
require(ggplot2)
lambda<-.2
noofreps<-1000
samples<-c(10, 40, 90, 200)
pmean=1/lambda
psd=1/lambda
ssd=psd/sqrt(samples)
coverage <- sapply(samples, function(samples) {
rdata <- replicate(noofreps, rexp(samples, lambda))
expmeans <- (colMeans(rdata)-pmean)/ssd
mean<-mean(expmeans)
#hist(expmeans, prob=TRUE)
#curve(dnorm(x, mean=0, sd=1), add=TRUE)
ll <- expmeans - qnorm(0.975) * ssd
ul <- expmeans + qnorm(0.975) * ssd
mean(ll < 0 & ul > 0)
})
coverage
require(ggplot2)
lambda<-.2
noofreps<-5000
samples<-c(10, 40, 90, 200)
pmean=1/lambda
psd=1/lambda
ssd=psd/sqrt(samples)
coverage <- sapply(samples, function(samples) {
rdata <- replicate(noofreps, rexp(samples, lambda))
expmeans <- (colMeans(rdata)-pmean)/ssd
mean<-mean(expmeans)
#hist(expmeans, prob=TRUE)
#curve(dnorm(x, mean=0, sd=1), add=TRUE)
ll <- expmeans - qnorm(0.975) * ssd
ul <- expmeans + qnorm(0.975) * ssd
mean(ll < 0 & ul > 0)
})
coverage
qnorm(0.975)
data(ToothGrowth)
str(ToothGrowth)
require(ggplot2)
ggplot(ToothGrowth, aes(x=dose, y = len))+geom_point(size = 2)+facet_grid(. ~ supp)
summary(ToothGrowth)
VC05<-ToothGrowth[1:10,]
VC10<-ToothGrowth[11:20,]
VC05
VC05<-ToothGrowth[1:10,]
VC10<-ToothGrowth[11:20,]
VC20<-ToothGrowth[21:30,]
OJ05<-ToothGrowth[31:40,]
OJ10<-ToothGrowth[41:50,]
OJ15<-ToothGrowth[251:60,]
OJ15
VC05<-ToothGrowth[1:10,]
VC10<-ToothGrowth[11:20,]
VC20<-ToothGrowth[21:30,]
OJ05<-ToothGrowth[31:40,]
OJ10<-ToothGrowth[41:50,]
OJ15<-ToothGrowth[51:60,]
OJ15
a<- t.test(VC10, VC05, paried=FALSE)
a
a<- t.test(VC10$len, VC05$len, paried=FALSE)
a
str(a)
a$conf.int
a<- t.test(VC10$len, VC05$len, paried=FALSE)
a$conf.int[1]
a$conf.int[2]
a<- t.test(VC10$len, VC05$len, paried=FALSE)
lcb<-a$conf.int[1]
ucb<-a$conf.int[2]
if(ucb-lcb>abs(ucb)-abs(lcb)) {"does" else "does not"}`
if(ucb-lcb>abs(ucb)-abs(lcb)) {"does" else "does not"}
if(ucb-lcb>abs(ucb)-abs(lcb)) {"does"} else {"does not"}
t.test(OJ20$len-OJ05$len)
OJ20$len
VC05<-ToothGrowth[1:10,]
VC10<-ToothGrowth[11:20,]
VC20<-ToothGrowth[21:30,]
##Ornage Juice Set
OJ05<-ToothGrowth[31:40,]
OJ10<-ToothGrowth[41:50,]
OJ20<-ToothGrowth[51:60,]
t.test(OJ20$len$-OJ05$len)
t.test(OJ20$len$ - OJ05$len)
?t.test
t.test(OJ20$len$, OJ05$len, paired=FALSE)
t.test(OJ20$len$ ~ OJ05$len, paired=FALSE)
OJ20$len
OJ05$len
t.test(OJ20$len$ - OJ05$len, paired=FALSE)
library(UsingR)
install.packages("UsingR")
install.packages("UsingR")
data(father.son)
install.packages(c("Hmisc", "htmltools", "httr", "knitr", "labeling", "maps", "mime", "quantmod", "rmarkdown", "xtable"))
install.packages(c("boot", "class", "cluster", "codetools", "DBI", "gsubfn", "httr", "jsonlite", "KernSmooth", "MASS", "Matrix", "mgcv", "nlme", "Rcpp", "RCurl", "swirl", "testthat", "xlsx", "xlsxjars", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(USingR)
require(UsingR)
data(father.son)
father.son$height
father.son$sheight
OJ20$len$
data(ToothGrowth)
data(ToothGrowth)
str(ToothGrowth)
VC05<-ToothGrowth[1:10,]
VC10<-ToothGrowth[11:20,]
VC20<-ToothGrowth[21:30,]
##Ornage Juice Set
OJ05<-ToothGrowth[31:40,]
OJ10<-ToothGrowth[41:50,]
OJ20<-ToothGrowth[51:60,]
t.test(OJ20$len - OJ05$len, paired=FALSE)
b<-t.test(OJ20$len - OJ05$len, paired=FALSE)
str(b)
b<-t.test(OJ20$len, OJ05$len, paired=FALSE)
str(b)
b
require(datasets)
install.packages("reshape2")
str(TothGrowth)
str(ToothGrowth)
require(reshape2)
wideTG<-dcast(ToothGrowth, len, supp, dose)
wideTG<-dcast(ToothGrowth, dose ~ supp, value.var="len")
str(wideTG)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="length")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
head(wideTG)
str(wideTG)
wideTG<-dcast(ToothGrowth, dose + supp ~ len)
str(wideTG)
head(wideTG)
head(wideTG)
wideTG20 <- subset(wideTG, dose==2.0)
head(wideTG20)
test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
data(ChickWeight)
wideCW<-dcast(ChickWeight, Diet + Chick ~ Time, value.var="weight")
head(wideCW)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="length")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
str(ChickWeight)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
str(wideTG)
str(wideCW)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ length, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
install.packages("pandoc")
require(datasets)
data(toothGrowth)
data(ToothGrowth)
require(reshape2)
wideTG<-dcast(ToothGrowth, dose + supp ~ 1:10, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
wide```
head(wideTG20)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(dose~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
str(wideTG20)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ 1:10, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
t.test(sample~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(supp~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(supp~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
require(datasets)
data(ToothGrowth)
require(reshape2)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(sample~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
require(datasets)
data(ToothGrowth)
require(reshape2)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
```
###alt test of 2.0
```{r "alt test 20"}
t.test(sample~supp, paired=FALSE, var.equal=TRUE, data = wideTG20)
```{r "get_tweets"}
##This program assumes you have already run the TwitterReader.R to download a feed timeline.
##It reads the data in teh form of a .csv
## Get the relevnat tweet data
if (getwd()=="/Users/winstonsaunders/Documents") {setwd("TripcheckR")}
file_name <- "TripCheckUS20B"
hwy20Bfull<-read.csv(paste0(file_name, ".csv"))
##make the date column a date
hwy20Bfull$created<-as.Date(hwy20Bfull$created)
##convert data to dataframe
hwy_df<-hwy20Bfull
dim(hwy_df)
##Define Search Patterns
S1 <- "Santiam Pass Summit"
##Get tweets with S1
hwy_df <-hwy_df[grep(S1, hwy_df$text),]
S2 <- "crash"
## get tweets with S2
hwy_df <-hwy_df[grep(S2, hyw_df$text),]
##dedup the data
hwy_df<-hwy_df[!duplicated(hwy_df$created),]
## get some details on the crash from teh text string
##this usually will have a mile number
midist<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y-3,y-1)
else "NA"})
# if (y != FALSE) substring(x, y-3, y-1)})
distance<-as.numeric(midist)
direction<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y+2,y+3)
else "NA"})
hwy_df$text<-substring(hwy_df$text,7,12)
direction<-as.character(direction)
hwy_df$created<-as.Date(hwy_df$created)
##bind new columns
plotdata<-cbind(hwy_df, distance, direction )
##reduce dimensions
plotdata<-plotdata[,c(6,18,19)]
##filter for complete cases
plotdata<-plotdata[complete.cases(plotdata), ]
dim(hwy_df)
##Define Search Patterns
S1 <- "Santiam Pass Summit"
##Get tweets with S1
hwy_df <-hwy_df[grep(S1, hwy_df$text),]
S2 <- "crash"
## get tweets with S2
hwy_df <-hwy_df[grep(S2, hwy_df$text),]
##dedup the data
hwy_df<-hwy_df[!duplicated(hwy_df$created),]
## get some details on the crash from teh text string
##this usually will have a mile number
midist<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y-3,y-1)
else "NA"})
# if (y != FALSE) substring(x, y-3, y-1)})
distance<-as.numeric(midist)
direction<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y+2,y+3)
else "NA"})
hwy_df$text<-substring(hwy_df$text,7,12)
direction<-as.character(direction)
hwy_df$created<-as.Date(hwy_df$created)
##bind new columns
plotdata<-cbind(hwy_df, distance, direction )
##reduce dimensions
plotdata<-plotdata[,c(6,18,19)]
##filter for complete cases
plotdata<-plotdata[complete.cases(plotdata), ]
rangeYM<- c(plotdata$created[length(plotdata$created)], plotdata$created[1])
rangeYM
plotdata
str(hwy_df)
if (getwd()=="/Users/winstonsaunders/Documents") {setwd("TripcheckR")}
file_name <- "TripCheckUS20B"
hwy20Bfull<-read.csv(paste0(file_name, ".csv"))
##make the date column a date
hwy20Bfull$created<-as.Date(hwy20Bfull$created)
##convert data to dataframe
hwy_df<-hwy20Bfull
```
hwy_df<-read.csv(paste0(file_name, ".csv"))
str(hwy_df)
file_name <- "TripCheckUS20B"
hwy_df<-read.csv(paste0(file_name, ".csv"))
str(hwy_df)
hwy_df$created<-as.Date(hwy_df$created)
str(hwy_df)
dim(hwy_df)
##Define Search Patterns
S1 <- "Santiam Pass Summit"
##Get tweets with S1
hwy_df <-hwy_df[grep(S1, hwy_df$text),]
str(hwy_df)
S2 <- "crash"
## get tweets with S2
hwy_df <-hwy_df[grep(S2, hwy_df$text),]
str(hwy_df)
hwy_df<-hwy_df[!duplicated(hwy_df$created),]
str(hwy_df)
midist<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y-3,y-1)
else "NA"})
# if (y != FALSE) substring(x, y-3, y-1)})
distance<-as.numeric(midist)
midist
direction<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y+2,y+3)
else "NA"})
hwy_df$text<-substring(hwy_df$text,7,12)
direction<-as.character(direction)
rangeYM<- c(plotdata$created[length(plotdata$created)], plotdata$created[1])
rangeYM
str(plotdata)
plotdata<-cbind(hwy_df, distance, direction )
dim(plotdata)
plotdata<-plotdata[,c(6,18,19)]
dim(plotdata)
plotdata
plotdata<-plotdata[complete.cases(plotdata), ]
dim(plotdata)
rangeYM<- c(plotdata$created[dim(plotdata)[1]], plotdata$created[1])
rangeYM
rep_len(c(-1,1), length.out=nrow(plotdata))
head(plotdata)
test <- lapply(plotdata, function(x) if (direction == "W" | direction =="N") {distance} else (-1*distance)
)
test
test <- lapply(plotdata, function(x) if (x$direction == "W" | x$direction =="N") {x$distance} else (-1*x$distance)
)
test <- lapply(plotdata$distance, function(x) if (plotdata$direction == "W" | plotdata$direction =="N") {plotdata$distance} else (-1*plotdata$distance)
)
test
test <- lapply(plotdata$distance, function(x) if (plotdata$direction == "W") {plotdata$distance} else {(-1*plotdata$distance)}
)
test
?for
plotdata
for(i in 1:nrow(plotdata) {if(plotdata$direction =="E" | plotdata$direction =="S") plotdata$distance <- -1*plotdata$distance}
for(i in 1:nrow(plotdata) if(plotdata$direction =="E" | plotdata$direction =="S") plotdata$distance <- -1*plotdata$distance
for(i in 1:nrow(plotdata) if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]
for(i in 1:nrow(plotdata) {if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]}
for(i in 1:nrow(plotdata)) {if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]}
plotdata
plotdata$direction[1]
length(plotdata$direction[1])
length(plotdata$direction[1])=="W"
str(plotdata)
plotdata$direction <- as.character(plotdata$direction)
length(plotdata$direction[1])=="W"
plotdata
plotdata$direction[1]=="W"
a<-plotdata$direction[1]
a
a<-plotdata$direction[2]
a
a<-plotdata$direction[3]
a
plotdata$direction <- trim.leading(as.character(plotdata$direction))
trim.leading <- function (x)  sub("^\\s+", "", x)
plotdata$direction <- trim.leading(as.character(plotdata$direction))
a<-plotdata$direction[3]
a
for(i in 1:nrow(plotdata)) {if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]}
plotdata
ypts <- plotdata$distance
ypts
ypts+1
ypts-1
ypts*1.1
plot(NA,ylim=c(-10,10),xlim=rangeYM,ann=FALSE,axes=FALSE)
abline(h=0,lwd=2,col="#5B7FA3")
ypts <- plotdata$distance
y0pts = rep_len(0, length.out=nrow(plotdata))
txtpts <- rep_len(c(1,3), length.out=nrow(plotdata))
ylblpts <- ypts
lblpts <- rep_len(c(3,1), length.out=nrow(plotdata))
segments(as.Date(plotdata$created),y0pts,as.Date(plotdata$created),ypts,col="gray80")
axis.Date(
1,
at=seq.Date(rangeYM[1],rangeYM[2],by="month"),
format="%Y-%m",
cex.axis=0.6,
pos=0,
lwd=0,
lwd.tick=2,
col="#5B7FA3",
font=2
)
points(plotdata$created,y=ypts, pch=18, cex=1.5, col="#5B7FA3")
par(xpd=NA)
text(
plotdata$created, y=ylblpts,
labels=plotdata$text, cex=0.5, pos=lblpts, srt=90
)
par(xpd=FALSE)
```
plotdata
plot(NA,ylim=c(-10,10),xlim=rangeYM,ann=FALSE,axes=FALSE)
abline(h=0,lwd=2,col="#5B7FA3")
ypts <- plotdata$distance
y0pts = rep_len(0, length.out=nrow(plotdata))
txtpts <- rep_len(c(1,3), length.out=nrow(plotdata))
ylblpts <- ypts
lblpts <- rep_len(c(3,1), length.out=nrow(plotdata))
segments(as.Date(plotdata$created),y0pts,as.Date(plotdata$created),ypts,col="gray80")
axis.Date(
1,
at=seq.Date(rangeYM[1],rangeYM[2],by="month"),
format="%Y-%m-%d",
cex.axis=0.6,
pos=0,
lwd=0,
lwd.tick=2,
col="#5B7FA3",
font=2
)
points(plotdata$created,y=ypts, pch=20, cex=1.5, col="#5B7FA3")
rangeYM[1]
rangeYM[1]-20
rangeYM[1]-19
as.POSIXlt(rangeYM[1])
d<-as.POSIXlt(rangeYM[1])
d
e<-unclass(d)
e
e$mday
as.Date(d-e$mday+1)
d-e$mday+1
rangeYM[1]-e$mday+1
d<-as.POSIXlt(rangeYM[1])
e<-unclass(d)
rangeYM[1]<-rangeYM[1]-e$mday+1
plot(NA,ylim=c(-10,10),xlim=rangeYM,ann=FALSE,axes=FALSE)
abline(h=0,lwd=2,col="#5B7FA3")
ypts <- plotdata$distance
y0pts = rep_len(0, length.out=nrow(plotdata))
txtpts <- rep_len(c(1,3), length.out=nrow(plotdata))
ylblpts <- ypts
lblpts <- rep_len(c(3,1), length.out=nrow(plotdata))
segments(as.Date(plotdata$created),y0pts,as.Date(plotdata$created),ypts,col="gray80")
axis.Date(
1,
at=seq.Date(rangeYM[1],rangeYM[2],by="month"),
format="%Y-%m-%d",
cex.axis=0.6,
pos=0,
lwd=0,
lwd.tick=2,
col="#5B7FA3",
font=2
)
points(plotdata$created,y=ypts, pch=20, cex=1.5, col="#5B7FA3")
hist(plotdata$distance)
title(file_name)
ylab("Miles")
title(main=file_name, ylab="miles")
hist(plotdata$distance, main=filename,xlab="distance (E-W)", col = "deepskyblue2")
hist(plotdata$distance, main=file_name,xlab="distance (E-W)", col = "deepskyblue2")
hist(plotdata$distance, main=file_name,xlab="distance (E-W)", col = "deepskyblue2", xlim=c(-10,10))
hist(plotdata$distance, main=file_name,xlab="distance (E-W)", col = "deepskyblue2", xlim=c(-10,10), bins=20)
hist(plotdata$distance, main=file_name,xlab="distance (E-W)", col = "deepskyblue2", xlim=c(-10,10), breaks=20)
hist(plotdata$distance, main=file_name,xlab="distance (E-W)", col = "deepskyblue2", xlim=c(-10,10), breaks=10)
?nrow
(rangeYM[2]- rangeYM[1])
5/(rangeYM[2]- rangeYM[1])
7 * nrow(plotdata)/as.numeric((rangeYM[2]- rangeYM[1]))
