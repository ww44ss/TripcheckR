ggplot(td_gr234, aes(y=feat_61, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_60, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_59, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_58, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_57, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_56, x = target))+geom_jitter()
bb<-td_gr234
bracket <- function(x, l1=10, l2=15)
{
t<-10
if (x<l2) t<-5
if (x<l1) t<-0
x<-t
}
bb$feat_92<-sapply(bb$feat_92, bracket, l1=1, l2=2)
bb$feat_90<-sapply(bb$feat_90, bracket, l1=1, l2=3)
bb$feat_89<-sapply(bb$feat_89, bracket, l1=5, l2=17)
bb$feat_77<-sapply(bb$feat_77, bracket, l1=3, l2=3.5)
bb$feat_76<-sapply(bb$feat_76, bracket, l1=2, l2=2)
bb$feat_75<-sapply(bb$feat_75, bracket, l1=2, l2=2)
bb$feat_67<-sapply(bb$feat_67, bracket, l1=10, l2=20)
bb$feat_66<-sapply(bb$feat_66, bracket, l1=6, l2=10)
bb$feat_64<-sapply(bb$feat_64, bracket, l1=4, l2=6)
bb$feat_62<-sapply(bb$feat_64, bracket, l1=2, l2=6)
bb$feat_59<-sapply(bb$feat_64, bracket, l1=2, l2=5)
bb$feat_56<-sapply(bb$feat_64, bracket, l1=5, l2=10)
bracket <- function(x, l1=100, l2=150)
{
t<-10
if (x<l2) t<-5
if (x<l1) t<-0
x<-t
}
bb<-td_gr234
bracket <- function(x, l1=100, l2=150)
{
t<-10
if (x<l2) t<-5
if (x<l1) t<-0
x<-t
}
bb$feat_92<-sapply(bb$feat_92, bracket, l1=1, l2=2)
bb$feat_90<-sapply(bb$feat_90, bracket, l1=1, l2=3)
bb$feat_89<-sapply(bb$feat_89, bracket, l1=5, l2=17)
bb$feat_77<-sapply(bb$feat_77, bracket, l1=3, l2=3.5)
bb$feat_76<-sapply(bb$feat_76, bracket, l1=2, l2=2)
bb$feat_75<-sapply(bb$feat_75, bracket, l1=2, l2=2)
bb$feat_67<-sapply(bb$feat_67, bracket, l1=10, l2=20)
bb$feat_66<-sapply(bb$feat_66, bracket, l1=6, l2=10)
bb$feat_64<-sapply(bb$feat_64, bracket, l1=4, l2=6)
bb$feat_62<-sapply(bb$feat_64, bracket, l1=2, l2=6)
bb$feat_59<-sapply(bb$feat_64, bracket, l1=2, l2=5)
bb$feat_58<-sapply(bb$feat_58, bracket)
bb$feat_57<-sapply(bb$feat_57, bracket)
bb$feat_56<-sapply(bb$feat_64, bracket, l1=5, l2=10)
td_gr234<-bb
set.seed(8675309)
start_time <- proc.time()
cat("computing RF \n")
model_234 <- randomForest(target~.+feat_79^2-id, data=aa, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
eval_gr234<-eval_data[eval_data$group=="group_234",]
predict_234<-predict(model_234, newdata=eval_gr234, type="prob")
predict_234<-as.data.frame(predict_234)
predict_234_single<- as.factor(colnames(predict_234)[max.col(predict_234)])
print(table(predict_234_single, eval_gr234$target))
set.seed(8675309)
start_time <- proc.time()
cat("computing RF \n")
model_234 <- randomForest(target~.-id, data=td_gr234, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
eval_gr234<-eval_data[eval_data$group=="group_234",]
predict_234<-predict(model_234, newdata=eval_gr234, type="prob")
predict_234<-as.data.frame(predict_234)
predict_234_single<- as.factor(colnames(predict_234)[max.col(predict_234)])
print(table(predict_234_single, eval_gr234$target))
aa<-td_gr234
aa<-aa[, -c(1,95)]
aa<-pmin(aa, aa*0+2)
aa$target<-td_gr234$target
aa$id<-td_gr234$id
set.seed(8675309)
start_time <- proc.time()
cat("computing RF \n")
model_234 <- randomForest(target~.-id, data=td_gr234, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
eval_gr234<-eval_data[eval_data$group=="group_234",]
predict_234<-predict(model_234, newdata=eval_gr234, type="prob")
predict_234<-as.data.frame(predict_234)
predict_234_single<- as.factor(colnames(predict_234)[max.col(predict_234)])
print(table(predict_234_single, eval_gr234$target))
td_gr234<-td[td$group=="group_234", ]
### Use GBM's to classify the data
## create Group_234 model
## drop levels
td_gr234<-droplevels(td_gr234)
## get rid of group designator
td_gr234$group<-NULL
ggplot(td_gr234, aes(y=feat_67, x = target))+geom_jitter()
aa<-td_gr234
aa<-aa[, -c(1,95)]
aa<-pmin(aa, aa*0+2)
aa$target<-td_gr234$target
aa$id<-td_gr234$id
set.seed(8675309)
start_time <- proc.time()
cat("computing RF \n")
model_234 <- randomForest(target~.-id, data=td_gr234, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
eval_gr234<-eval_data[eval_data$group=="group_234",]
predict_234<-predict(model_234, newdata=eval_gr234, type="prob")
predict_234<-as.data.frame(predict_234)
predict_234_single<- as.factor(colnames(predict_234)[max.col(predict_234)])
print(table(predict_234_single, eval_gr234$target))
head(td_gr234)
?quantile
bb<-td_gr234
i<-3
aa<-cbind(target=bb$target, feature = bb[,i])
head(aa)
head(bb$target)
bb$target<-as.character(bb$target)
i<-3
aa<-cbind(target=bb$target, feature = bb[,i])
head(aa)
aa$target<-as.factor(aa$target)
str(aa)
aa<-as.data.frame(aa)
head(aa)
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.95)
aa$target<_as.character(aa$target)
aa$target<-as.character(aa$target)
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.95)
str(aa)
aa<-cbind(target=bb$target, feature = bb[,i])
aa<-as.data.frame(aa)
aa$target<-as.character(aa$target)
aa$feature<-as.numeric(aa$feature)
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.95)
gr_2
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.05)
gr_2
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.0001)
gr_2
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.999)
gr_2
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.999)[[1]]
gr_2
filter<-min(gr_2, gr_3, gr_4)
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.999)[[1]]
gr_3<-quantile(aa[aa$target=="Class_3",2], probs=.999)[[1]]
gr_4<-quantile(aa[aa$target=="Class_2",4], probs=.999)[[1]]
filter<-min(gr_2, gr_3, gr_4)
filter
gr_2
gr_3
gr_4
gr_4<-quantile(aa[aa$target=="Class_4",2], probs=.999)[[1]]
filter<-min(gr_2, gr_3, gr_4)
filter
gr_4
bb<-td_gr234
bb$target<-as.character(bb$target)
for (i in 2:(ncol(bb)-1)){
aa<-cbind(target=bb$target, feature = bb[,i])
aa<-as.data.frame(aa)
aa$target<-as.character(aa$target)
aa$feature<-as.numeric(aa$feature)
gr_2<-quantile(aa[aa$target=="Class_2",2], probs=.999)[[1]]
gr_3<-quantile(aa[aa$target=="Class_3",2], probs=.999)[[1]]
gr_4<-quantile(aa[aa$target=="Class_4",2], probs=.999)[[1]]
filter<-min(gr_2, gr_3, gr_4)
bb[,i]<-sapply(bb[,i], bracket, l1=filter)
}
set.seed(8675309)
start_time <- proc.time()
cat("computing RF \n")
model_234 <- randomForest(target~.-id, data=td_gr234, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
eval_gr234<-eval_data[eval_data$group=="group_234",]
predict_234<-predict(model_234, newdata=eval_gr234, type="prob")
predict_234<-as.data.frame(predict_234)
predict_234_single<- as.factor(colnames(predict_234)[max.col(predict_234)])
print(table(predict_234_single, eval_gr234$target))
install.packages(c("arm", "caret", "cba", "cluster", "codetools", "corpcor", "crayon", "DEoptimR", "e1071", "gamlss.data", "gamlss.dist", "gmodels", "gridExtra", "heplots", "igraphdata", "lattice", "mapdata", "mapproj", "maps", "MASS", "Matrix", "mgcv", "multcomp", "mvtnorm", "openair", "polspline", "proxy", "psych", "qdap", "qdapRegex", "RcppEigen", "registry", "rgenoud", "rgl", "robustbase", "rversions", "sn", "tm", "TTR", "vcd", "vcdExtra"))
install.packages(c("arm", "caret", "cba", "cluster", "codetools",
install.packages(c("arm", "caret", "cba", "cluster", "codetools", "corpcor", "crayon", "DEoptimR", "e1071", "gamlss.data", "gamlss.dist", "gmodels", "gridExtra", "heplots", "igraphdata", "lattice", "mapdata", "mapproj", "maps", "MASS", "Matrix", "mgcv", "multcomp", "mvtnorm", "openair", "polspline", "proxy", "psych", "qdap", "qdapRegex", "RcppEigen", "registry", "rgenoud", "rgl", "robustbase", "rversions", "sn", "tm", "TTR", "vcd", "vcdExtra"))
install.packages(c("cba", "mgcv", "openair", "qdap", "rgl", "tm"))
install.packages(c("cba", "mgcv", "openair", "rgl", "tm"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "openair", "qdap", "rgl", "rpart", "spatial", "survival"))
install.packages(c("mgcv", "openair", "rgl"))
require(ggplot2)
require(gbm)
require(randomForest)
require(caret)
require(plyr)
RF_sample<-0.6
## GBM_sample must be < 1.0 for there to be an eval data set.
## currently the program does not control for a zero eval set
GBM_sample<-0.90
## Random Forest Parameters
P_ntree<-20
P_nodesize<-3
## GBM Parameters
gbm_control<- trainControl(method="repeatedcv",
number=3,
repeats=2)
gbm_grid <- expand.grid(
.interaction.depth = (1:2)*10,
.n.trees = (1:2)*100,
.shrinkage = .05,
.n.minobsinnode=3)
ada_grid<- expand.grid(
.iter= c(50,100),
.maxdepth = c(4,8),
.nu = c(0.1,1))
cv_control <- trainControl(method= "repeatedcv", repeats = 3)
## FUNCTION FOR DATA BUNDLING
## group Classes 2, 3 4 into one class called group_234, all others into another called group_1
group_234<- function(datax){
## create additional factor column
datax$group<-rep("group_1", nrow(datax))
## turn target into character
datax$target<-as.character(datax$target)
datax$group[datax$target=="Class_3"|datax$target=="Class_4"|datax$target=="Class_2"]<-"group_234"
datax$target<-as.factor(datax$target)
datax$group<-as.factor(datax$group)
print(table(datax$group))
return(datax)
}
## GET TRAINING DATA
## variable train_data
directory<- "/Users/winstonsaunders/Documents/pdxkagglegroupproductclassproject/"
file_name<- "train.csv"
train_data<-read.csv(paste0(directory,file_name))
## ensure proper read of data
cat("the dimensions of loaded train_data are: ",dim(train_data)[1], " rows X ", dim(train_data)[2], "columns","\n")
sample_data<-TRUE
set.seed(8675309)
if (sample_data == TRUE){
sample_rows <- sample(1:nrow(train_data), size=RF_sample*nrow(train_data))
## create two data sets
td<-train_data[sample_rows,]
train_data2<-train_data[-sample_rows,]
## create a third, smaller sample for intermediate evaluation
sample_rows2<- sample(1:nrow(train_data2), size=GBM_sample*nrow(train_data2))
## create two data sets, preserving teh name of the first
train_data2<-train_data2[sample_rows2,]
eval_data<-train_data2[-sample_rows2,]
## reassign train data
train_data<-td
}
cat("the dimensions of RF train_data are: ",dim(train_data)[1], " rows X ", dim(train_data)[2], "columns","\n")
cat("the dimensions of GBM train_data2 are: ",dim(train_data2)[1], " rows X ", dim(train_data2)[2], "columns","\n")
cat("the dimensions of eval_data are: ",dim(eval_data)[1], " rows X ", dim(eval_data)[2], "columns","\n")
## RESERVE DATA
train_data_full<-train_data
train_data2_full<-train_data2
eval_data_full<-eval_data
train_data<-group_234(train_data)
train_data2<-group_234(train_data2)
eval_data<-group_234(eval_data)
td<-train_data
## Random forest Model
set.seed(8765309)
start_time <- proc.time()
cat("computing RF \n")
categorization_model <- randomForest(group~.-id-target, data=td, importance=TRUE, ntree=P_ntree, nodesize=P_nodesize)
finish_time<-proc.time()
elapsed_time<-finish_time-start_time
cat("time ", elapsed_time, " seconds \n")
predict_categorization_input<-eval_data
categorization_predict<-predict(categorization_model, newdata=predict_categorization_input, type="prob")
categorization_predict<-as.data.frame(categorization_predict)
categorization_predict<- as.factor(colnames(categorization_predict)[max.col(categorization_predict)])
print(table(categorization_predict, eval_data$group))
check<-table(categorization_predict==eval_data$group)
accuracy<-1-check[1]/(check[1]+check[2])
cat("accuracy of rf is ", round(100*accuracy,2), "%","\n")
td<-train_data
## split data into groups
td_gr1<-td[td$group=="group_1", ]
td_gr234<-td[td$group=="group_234", ]
td_gr234<-droplevels(td_gr234)
## get rid of group designator
td_gr234$group<-NULL
ggplot(td_gr234, aes(y=feat_67, x = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_67, x = feat_68, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_67, x = feat_68, color = target))+geom_point()
ggplot(td_gr234, aes(y=feat_66, x = feat_68, color = target))+geom_point()
ggplot(td_gr234, aes(y=feat_92, x = feat_79, color = target))+geom_point()
ggplot(td_gr234, aes(y=feat_92, x = feat_76, color = target))+geom_point()
ggplot(td_gr234, aes(y=feat_89, x = feat_77, color = target))+geom_point()
ggplot(td_gr234, aes(y=feat_89, x = feat_77, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_90, x = feat_92, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_1, x = feat_2, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_3, x = feat_4, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_5, x = feat_6, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_7, x = feat_8, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_9, x = feat_10, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_11, x = feat_12, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_13, x = feat_14, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_14, x = feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_17, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_17, x = feat_18, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_19, x = feat_20, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_21, x = feat_22, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_23, x = feat_24, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_23, x = feat_89, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_23, x = feat_24, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_25, x = feat_26, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_27, x = feat_28, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_29, x = feat_30, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_31, x = feat_32, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_32, x = feat_32, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_32, x = feat_10, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_15, x = feat_15*feat_16, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_32, x = feat_33, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_32, x = feat_33*feat_32, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_34, x = feat_33*feat_32, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=feat_34*feat_35, x = feat_33*feat_32, color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_34*feat_35), x = sqrt(feat_33*feat_32), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_1*feat_2), x = sqrt(feat_3*feat_4), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_4*feat_5), x = sqrt(feat_3*feat_4), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_4*feat_5), x = sqrt(feat_6*feat_7), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_4*feat_5), x = sqrt(feat_6*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_7), x = sqrt(feat_6*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_7), x = sqrt(feat_5*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_6), x = sqrt(feat_5*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_7*feat_7), x = sqrt(feat_5*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_7), x = sqrt(feat_5*feat_5), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_7), x = sqrt(feat_5*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_5*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_6), x = sqrt(feat_5*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_5*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_6*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_7*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_8*feat_9), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_6*feat_8), x = sqrt(feat_8*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_11*feat_8), x = sqrt(feat_8*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_11*feat_10), x = sqrt(feat_8*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_11*feat_10), x = sqrt(feat_12*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_12*feat_10), x = sqrt(feat_12*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_13*feat_10), x = sqrt(feat_12*feat_10), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_13*feat_12), x = sqrt(feat_12*feat_10), color = target))+geom_jitter()
td_gr234$group<-NULL
## explore data correlations
ggplot(td_gr234, aes(y=sqrt(feat_13*feat_12), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_14*feat_13), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_14*feat_15), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_16*feat_15), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_16*feat_17), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_18*feat_17), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_19*feat_18), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_19*feat_20), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_19*feat_21), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_18*feat_21), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_20*feat_21), x = sqrt(feat_12*feat_11), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_20*feat_21), x = sqrt(feat_21*feat_22), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_20*feat_21), x = sqrt(feat_22*feat_23), color = target))+geom_jitter()
ggplot(td_gr234, aes(y=sqrt(feat_23*feat_24), x = sqrt(feat_22*feat_23), color = target))+geom_jitter()
version()
?version
R.version()
R.Version()
R.version.string
R.version.string
install.packages(c("class", "devtools", "foreign", "MASS", "nlme", "nnet", "raster", "rgl", "RMySQL", "sp", "spatial"))
library(bitops)
library(RCurl)
if (getwd()=="/Users/winstonsaunders/Documents") {setwd("TripcheckR")}
if (getwd()!="/Users/winstonsaunders/Documents/TripcheckR") {setwd("/Users/winstonsaunders/Documents/TripcheckR")}
file_name <- "TripCheckUS20B_Sep15"
hwy_df<-read.csv(paste0(file_name, ".csv"))
hwy_df<-hwy_df[,c("created", "text")]
##display sample of raw data
#head(hwy_df)
##make the date column a date
hwy_df$date<-as.Date(hwy_df$created)
## create pacific time column
hwy_df$PDT<-as.POSIXct(hwy_df$created, tz="UTC")
## convert to Pacific time
attributes(hwy_df$PDT)$tzone<-"US/Pacific"
##make an "hour" column (for time of day)
library(lubridate)
t.lub <- ymd_hms(hwy_df$PDT)
hwy_df$hour <- hour(t.lub) + minute(t.lub)/60
hwy_df$chronsecs<-as.numeric(as.POSIXlt(hwy_df$PDT))
## create "dayperiod"
hwy_df$dayperiod<-NA
hwy_df$dayperiod[hwy_df$hour>=3 & hwy_df$hour<9]<-"morning"
hwy_df$dayperiod[hwy_df$hour>=9 & hwy_df$hour<15]<-"midday"
hwy_df$dayperiod[hwy_df$hour>=15 & hwy_df$hour<21]<-"evening"
hwy_df$dayperiod[hwy_df$hour>=19]<-"night"
hwy_df$dayperiod[hwy_df$hour<3]<-"night"
## make a factor
hwy_df$dayperiod<-as.factor(hwy_df$dayperiod)
#head(hwy_df)
### capture start and edn times of period
tEnd <- as.Date(hwy_df$created)[length(hwy_df$created)]
tStart <- as.Date(hwy_df$created[1])
incident <- "crash"
metaincident <- "snow"
## get tweets with indicent or metaincident
#hwy_snow<-hwy_df[grep(incident, hwy_df$text)|grep(metaincident, hwy_df$text),]
#hwy_snow<-hwy_snow[!duplicated(hwy_snow$created),]
##Get Crashes
hwy_crash <-hwy_df[grep("crash", tolower(hwy_df$text)),]
dim(hwy_crash)
## Reduce duplicates by filter crash reports less than 3 hours from previous
hwy_crash <- hwy_crash[rev(rownames(hwy_crash)),]
dim(hwy_crash)
hwy_crash$lag<-lag(hwy_crash$chronsecs, default = hwy_crash$chronsecs[1]-(3*3600+1))
dim(hwy_crash)
hwy_crash$hourdelta<-(hwy_crash$chronsecs-hwy_crash$lag)/3600.
dim(hwy_crash)
hwy_crash<-hwy_crash[hwy_crash$hourdelta>3, ]
##Total crashes reported by twitter feed for all of hwy 20
TotalCrashes <- dim(hwy_crash)[1]
print("total crashes", TotalCrashes)
## get tweets with snow reported anywhere on hwy 20
hwy_snow <-hwy_df[grep("snow", tolower(hwy_df$text)),]
print("hwy_snow")
dim(hwy_snow)
head(hwy_snow[1:7])
## dedupe
hwy_snow <- hwy_snow[rev(rownames(hwy_snow)),]
dim(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$chronsecs, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow <-hwy_df[grep("snow", tolower(hwy_df$text)),]
print("hwy_snow")
dim(hwy_snow)
head(hwy_snow[1:7])
## dedupe
hwy_snow <- hwy_snow[rev(rownames(hwy_snow)),]
dim(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$chronsecs, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow <-hwy_df[grep("snow", tolower(hwy_df$text)),]
print("hwy_snow")
dim(hwy_snow)
head(hwy_snow[1:7])
## dedupe
hwy_snow <- hwy_snow[rev(rownames(hwy_snow)),]
dim(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$chronsecs)#, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$chronsecs, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
?lag
hwy_snow$lag<-lag(hwy_snow$chronsecs, k=1, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$chronsecs, k=2, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow$lag<-NULL
hwy_snow$lag<-lag(hwy_snow$chronsecs, k=2, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow <-hwy_df[grep("snow", tolower(hwy_df$text)),]
print("hwy_snow")
dim(hwy_snow)
head(hwy_snow[1:7])
str(hwy_snow)
hwy_snow <-hwy_df[grep("snow", tolower(hwy_df$text)),]
print("hwy_snow")
dim(hwy_snow)
head(hwy_snow[1:7])
## dedupe
hwy_snow <- hwy_snow[rev(rownames(hwy_snow)),]
dim(hwy_snow)
head(hwy_snow)
tail(hwy_snow)
hwy_snow$lag<-NULL
hwy_snow$lag<-lag(hwy_snow$chronsecs, k=2, default = hwy_snow$chronsecs[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow$lag<-lag(hwy_snow$lag, k=2, default = hwy_snow$lag[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
dim(hwy_snow)
head(hwy_snow)
tail(hwy_snow)
?diff
hwy_snow$lag<-diff(hwy_snow$chronsecs, lag=1)
hwy_snow$lag<-c(hwy_snow$chronsecs[1]-(3*3600+1),diff(hwy_snow$chronsecs, lag=1))
dim(hwy_snow)
head(hwy_snow)
hwy_snow$lag<-c((3*3600+1),diff(hwy_snow$chronsecs, lag=1))
#hwy_snow$lag<-lag(hwy_snow$lag, k=2, default = hwy_snow$lag[1]-(3*3600+1))
dim(hwy_snow)
head(hwy_snow)
