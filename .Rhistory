b<-t.test(OJ20$len, OJ05$len, paired=FALSE)
str(b)
b
require(datasets)
install.packages("reshape2")
str(TothGrowth)
str(ToothGrowth)
require(reshape2)
wideTG<-dcast(ToothGrowth, len, supp, dose)
wideTG<-dcast(ToothGrowth, dose ~ supp, value.var="len")
str(wideTG)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="length")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
head(wideTG)
str(wideTG)
wideTG<-dcast(ToothGrowth, dose + supp ~ len)
str(wideTG)
head(wideTG)
head(wideTG)
wideTG20 <- subset(wideTG, dose==2.0)
head(wideTG20)
test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
data(ChickWeight)
wideCW<-dcast(ChickWeight, Diet + Chick ~ Time, value.var="weight")
head(wideCW)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="length")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
str(ChickWeight)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
str(wideTG)
str(wideCW)
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ length, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ len, value.var="len")
install.packages("pandoc")
require(datasets)
data(toothGrowth)
data(ToothGrowth)
require(reshape2)
wideTG<-dcast(ToothGrowth, dose + supp ~ 1:10, value.var="len")
wideTG20 <- subset(wideTG, dose==2.0)
wide```
head(wideTG20)
t.test(len~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(dose~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
str(wideTG20)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ 1:10, value.var="len")
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
t.test(sample~supp, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(supp~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(supp~sample, paired=FALSE, var.equal=TRUE, data=wideTG20)
require(datasets)
data(ToothGrowth)
require(reshape2)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(sample~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
t.test(len~dose, paired=FALSE, var.equal=TRUE, data=wideTG20)
require(datasets)
data(ToothGrowth)
require(reshape2)
sample<-1:10
wideTG<-dcast(ToothGrowth, dose + supp ~ sample, value.var="len")
```
###alt test of 2.0
```{r "alt test 20"}
t.test(sample~supp, paired=FALSE, var.equal=TRUE, data = wideTG20)
install.packages(c("highr", "Hmisc", "htmltools", "httr", "knitr", "labeling", "maps", "mime", "quantmod", "rjson", "Rook", "xtable"))
install.packages(c("boot", "class", "cluster", "codetools", "data.table", "DBI", "gsubfn", "httpuv", "httr", "jsonlite", "KernSmooth", "MASS", "mgcv", "nlme", "Rcpp", "RCurl", "RSQLite", "sqldf", "swirl", "testthat", "xlsx", "xlsxjars", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("bitops")
library("bitops", lib.loc="~/Library/R/3.1/library")
require(bitops)
require(RCurl)
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("RCurl")
install.packages("bitops")
install.packages("rmarkdown")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rmarkdown", lib.loc="~/Library/R/3.1/library")
r.version.string
R.version.string
instal.package("swirl")
install.package("swirl")
install.packages("swirl")
install.packages("bitops")
library("bitops", lib.loc="~/Library/R/3.1/library")
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="~/Library/R/3.1/library")
library(swirl)
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline<-(lm(child~parent, glaton))
regrline<-lm(child~parent, glaton)
regrline<-lm(child~parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
s<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
carnls <- nls(mpg~I(wt + wt^2), mtcars, start = list(wt = 1))
carnls
s<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
s
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(s, predict(carnls, list(x = s)), col = "green")
predict(carnls, list(x = s))
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
?predict
?predict.nls
predict.nls(carnls, list(x = ss))
predict(carnls, list(x = ss))
predict(carnls, x = ss)
ss
library(nls)
carnls <- nls(mpg~I(wt + wt^2), mtcars, start = list(wt = 1))
carnls
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(ss, fitted.values(carnls), lwd=2)
?lines
?fitted.values
fitted.values(carnls)
fitted.values(carnls~x)
predict.nls(carnls, ss)
predict(carnls, ss)
ss
apply(ss, predict(carnls, ss))
apply(ss, function(x) predict(carnls, x))
?apply
lapply(ss, function(x) predict(carnls, x))
carnls
carnls <- nls(mpg~wt + wt^2, mtcars, start = list(wt = 1))
carnls
carnls <- nls(mpg~a1*wt + b1*wt^2, mtcars, start = list(a1=-4, b1=0))
carnls
carnls <- nls(mpg~a1*wt + b1*wt^2, mtcars, start = list(a1=-4, b1=0))
carnls
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
fitted.values(carnls~x)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(x=ss, fitted.values(carnls), lwd=2)
lines(ss, predict(carnls, list(x = ss)), col = "green")
predict(carnls, list(x = ss))
ss
length(ss)
length(predict(carnls, list(x = ss)))
length(predict(carnls, x = ss))
predict(carnls)
?predict
for(fn in methods("predict"))
try({
f <- eval(substitute(getAnywhere(fn)$objs[[1]], list(fn = fn)))
cat(fn, ":\n\t", deparse(args(f)), "\n")
}, silent = TRUE)
predict(nls)
predict(carnls)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(wt, predict(carnls, list(x = ss)), col = "green")
lines(mtcars$wt, predict(carnls, list(x = ss)), col = "green")
carnls <- nls(mpg~a1*wt + b1/wt, mtcars, start = list(a1=-4, b1=0))
tidy(carnls)
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 20)
fitted.values(carnls~x)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(mtcars$wt, predict(carnls, list(x = ss)), col = "green")
lines(mtcars$wt, predict(carnls), col = "green")
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
lines(mtcars$wt, predict(carnls), col = "green")
ss<-seq(range(mtcars$wt), length = 20)
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 50)
wt
yy <- predict(carnls,list(wt = ss))
yy <- predict(carnls,list(x = ss))
yy <- predict(carnls,list(wt = ss))
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
yy <- predict(carnls,list(wt = ss))
lines(ss, yy, col = "green")
lines(ss, yy, col = "green", wt=3)
lines(ss, yy, col = "green", lwd=3)
library(plyr)
mutate(mtcars, gpm=1/mpg)
library(plyr)
mutate(mtcars, gpm=1/mpg)
carlm <- lm(gpm~wt, mtcars)
carlm
plot(jitter(gpm,4)~wt, data=mtcars, pch=20, col="slateblue1", xlab="weight", ylab="gpm")
abline(carlm, col="orange", lwd=2)
mutate(mtcars, gpm=1/mpg)
carlm <- lm(gpm~wt, mtcars)
library(plyr)
mtcars2 <- mutate(mtcars, gpm=1/mpg)
carlm <- lm(gpm~wt, mtcars2)
carlm
plot(jitter(gpm,4)~wt, data=mtcars2, pch=20, col="slateblue1", xlab="weight", ylab="gpm")
abline(carlm, col="orange", lwd=2)
yy <- predict(carnls,list(wt = ss))
mpgpredict<-predict(carnls)
mpgpredict
plot((mpg-mpgpredict)~wt, data=mtcars)
hist(mtcars$mpg-mpgpredict)
hist(mtcars$mpg-mpgpredict, bins=10)
hist(mtcars$mpg-mpgpredict, breaks=15)
hist(mtcars$mpg-mpgpredict, breaks=15, col="lightblue")
hist(mtcars$mpg-mpgpredict, breaks=15, col="lightblue", xlab="mpg residual", title="mpg residuals")
hist(mtcars$mpg-mpgpredict, breaks=15, col="lightblue", xlab="mpg residual")
carnls <- nls(mpg~a1*wt + b1/wt, mtcars, start = list(a1=1, b1=0))
carnls
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 50)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
yy <- predict(carnls,list(wt = ss))
lines(ss, yy, col = "green", lwd=3)
mpgpredict<-predict(carnls)
plot((mpg-mpgpredict)~wt, data=mtcars)
hist(mtcars$mpg-mpgpredict, breaks=15, col="lightblue", xlab="mpg residual", main="Histogram of mpg residuals")
carnls <- nls(mpg~a1 + b1/wt, mtcars, start = list(a1=1, b1=50))
carnls
ss<-seq(from = min(mtcars$wt), to = max(mtcars$wt), length = 50)
plot(jitter(mpg,4)~wt, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
yy <- predict(carnls,list(wt = ss))
lines(ss, yy, col = "green", lwd=3)
mpgpredict<-predict(carnls)
plot((mpg-mpgpredict)~wt, data=mtcars)
hist(mtcars$mpg-mpgpredict, breaks=15, col="lightblue", xlab="mpg residual", main="Histogram of mpg residuals")
mtcars$gear
str(mtcars)
plot(jitter(gpm,4)~wt, data=mtcars2, facet.~am,pch=20, col="slateblue1", xlab="weight", ylab="gpm")
plot(jitter(gpm,4)~wt, data=mtcars2, ,pch=20, col="slateblue1", xlab="weight", ylab="gpm")
library(plyr)
mtcars2 <- mutate(mtcars, gpm=1/mpg)
carlm <- lm(gpm~wt, mtcars2)
carlm
plot(jitter(gpm,4)~wt, data=mtcars2, ,pch=20, col="slateblue1", xlab="weight", ylab="gpm")
abline(carlm, col="orange", lwd=2)
plot(jitter(gpm,4)~wt, data=mtcars2,pch=20, col="slateblue1", xlab="weight", ylab="gpm")
data(mtcars)
pairs(~mpg+disp+am+wt,data=mtcars,
main="Exploratory Analysis")
pairs(~mpg+disp+am+wt+hp,data=mtcars,
main="Exploratory Analysis")
pairs(~mpg+disp+am+hp+wt,data=mtcars,
main="Exploratory Analysis")
head(mtcars)
carnls <- nls(mpg~a1 + b1/hp, mtcars, start = list(a1=1, b1=50))
carnls
ss<-seq(from = min(mtcars$hp), to = max(mtcars$hp), length = 20)
plot(jitter(mpg,4)~hp, data=mtcars, pch=19, col="slateblue2", xlab="weight", ylab="mpg")
yy <- predict(carnls,list(hp = ss))
lines(ss, yy, col = "green", lwd=3)
carnls <- nls(mpg~a1 + b1/hp, mtcars, start = list(a1=1, b1=50))
carnls
ss<-seq(from = min(mtcars$hp), to = max(mtcars$hp), length = 20)
plot(jitter(mpg,4)~hp, data=mtcars, pch=19, col="slateblue2", xlab="horsepower", ylab="mpg")
yy <- predict(carnls,list(hp = ss))
lines(ss, yy, col = "orange4", lwd=3)
carnls <- nls(mpg~a1 + b1/hp, mtcars, start = list(a1=1, b1=50))
carnls
ss<-seq(from = min(mtcars$hp), to = max(mtcars$hp), length = 50)
plot(jitter(mpg,4)~hp, data=mtcars, pch=19, col="slateblue2", xlab="horsepower", ylab="mpg")
yy <- predict(carnls,list(hp = ss))
lines(ss, yy, col = "orange4", lwd=3)
autoresids <- mtcars2[am==0,mpgresids]
mpgresids <- mtcars$mpg-mpgpredict
main="Exploratory Analysis")
data(mtcars)
pairs(~mpg+disp+am+hp+wt,data=mtcars,
main="Exploratory Analysis")
library(ggplot2)
p<-ggplot(mtcars, aes(wt, mpg, color=factor(am))) + geom_point()
p
carnls <- nls(mpg~a1 + b1/hp, mtcars, start = list(a1=1, b1=50))
carnls
ss<-seq(from = min(mtcars$hp), to = max(mtcars$hp), length = 50)
plot(jitter(mpg,4)~hp, data=mtcars, pch=19, col="slateblue2", xlab="horsepower", ylab="mpg")
yy <- predict(carnls,list(hp = ss))
lines(ss, yy, col = "orange4", lwd=3)
```
mpgpredict<-predict(carnls)
plot((mpg-mpgpredict)~hp, data=mtcars)
hist(mtcars$mpg-mpgpredict, breaks=18, col="wheat3", xlab="mpg residual", main="Histogram of mpg residuals")
mpgresids <- mtcars$mpg-mpgpredict
mtcars2<-cbind(mtcars, mpgresids)
p<-ggplot(mtcars2, aes(hp, mpgresids, color=factor(am))) + geom_point()
p
p<-ggplot(mtcars, aes(hp, mpg, color=factor(am))) + geom_point()
p
mpgresids <- mtcars$mpg-mpgpredict
mtcars2<-cbind(mtcars, mpgresids)
p<-ggplot(mtcars2, aes(wt, mpgresids, color=factor(am))) + geom_point()
p
p<-ggplot(mtcars, aes(wt, mpg, color=factor(am))) + geom_point()
p
autoresids <- mtcars2[am==0,mpgresids]
autoresids <- mtcars2[am==0,]
str(mtcars2)
autoresids <- mtcars2[mtcars$am==0,]
manresids <- mtcars2[mtcars$am==1,]
meanautoresids<-mean(autoresids$mpgresids)
sdautoresids<-sd(autoresids$mpgresids)
meanmanresids<-mean(manresids$mpgresids)
sdmanresids<-sd(manresids$mpgresids)
meanautoresids
meanstdresids
meanmanresids
sdautoresids
meanmanresids
sdmanresids
nautoresids <- nrow(autoresids)
nmanresids <- nrow(manresids)
nautoresids
nmanresids
t.test(autoresids$mpgresids, manresids$mpgresids)
aaa<-t.test(autoresids$mpgresids, manresids$mpgresids)
str(aaa)
t.test(autoresids$mpgresids, manresids$mpgresids, alternative="less")
aaa$p.value
aaa<-t.test(autoresids$mpgresids, manresids$mpgresids, alternative="less")
aaa$p.value
aaa$conf.int
aaa$conf.int[1]
aaa$conf.int[2]
p<-ggplot(mtcars, aes(hp, wt, color=factor(am))) + geom_point()
p
p<-ggplot(mtcars2, aes(wt, mpgresids, color=factor(am))) + geom_point()
p
##This program assumes you have already run the TwitterReader.R to download a feed timeline.
##It reads the data in teh form of a .csv
## Get the relevnat tweet data
if (getwd()=="/Users/winstonsaunders/Documents") {setwd("TripcheckR")}
file_name <- "TripCheckUS20B"
hwy_df<-read.csv(paste0(file_name, ".csv"))
##make the date column a date
hwy_df$created<-as.Date(hwy_df$created)
##Define Search Patterns
location <- "Santiam Pass Summit"
##Get tweets with S1
hwy_df <-hwy_df[grep(location, hwy_df$text),]
##add second tata table for correlation
## need to be insterted first
incident <- "snow"
## get tweets with S2
hwy_df2 <-hwy_df[grep(incident, hwy_df$text),]
incident <- "crash"
## get tweets with S2
hwy_df <-hwy_df[grep(incident, hwy_df$text),]
##dedup the data
hwy_df<-hwy_df[!duplicated(hwy_df$created),]
hwy_df2<-hwy_df2[!duplicated(hwy_df2$created),]
##analyze the hwy_df data
## get details on the crash from the text string
##Find "Mi" maker and then extract miles number
midist<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y-3,y-1)
else "NA"})
distance<-as.numeric(midist)
direction<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y+2,y+3)
else "NA"})
hwy_df$text<-substring(hwy_df$text,7,12)
direction<-as.character(direction)
##bind new columns to data frame
plotdata<-cbind(hwy_df, distance, direction )
##reduce dimensions, keeping date, distance, and direction
plotdata<-plotdata[,c(6,18,19)]
##filter for complete cases
plotdata<-plotdata[complete.cases(plotdata), ]
##define function to strip spaces
trim.leading <- function (x)  sub("^\\s+", "", x)
plotdata$direction <- trim.leading(as.character(plotdata$direction))
#Sign the distance based on direction
for(i in 1:nrow(plotdata)) {if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]}
## plot data 2
plotdata2<-hwy_df2$created          ##keep only data column
##data are processed and ready to plot
plotdata2
##This program assumes you have already run the TwitterReader.R to download a feed timeline.
##It reads the data in teh form of a .csv
## Get the relevnat tweet data
if (getwd()=="/Users/winstonsaunders/Documents") {setwd("TripcheckR")}
file_name <- "TripCheckUS20B"
hwy_df<-read.csv(paste0(file_name, ".csv"))
##make the date column a date
hwy_df$created<-as.Date(hwy_df$created)
##add meta table for correlation
## need to be insterted first
incident <- "snow"
## get tweets with S2
hwy_df2 <-hwy_df[grep(incident, hwy_df$text),]
##Define Search Patterns
location <- "Santiam Pass Summit"
##Get tweets with S1
hwy_df <-hwy_df[grep(location, hwy_df$text),]
incident <- "crash"
## get tweets with S2
hwy_df <-hwy_df[grep(incident, hwy_df$text),]
##dedup the data
hwy_df<-hwy_df[!duplicated(hwy_df$created),]
hwy_df2<-hwy_df2[!duplicated(hwy_df2$created),]
##analyze the hwy_df data
## get details on the crash from the text string
##Find "Mi" maker and then extract miles number
midist<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y-3,y-1)
else "NA"})
distance<-as.numeric(midist)
direction<-lapply(hwy_df$text, function(x) {y<- regexpr("Mi", x)
if (y >4) substring(x,y+2,y+3)
else "NA"})
hwy_df$text<-substring(hwy_df$text,7,12)
direction<-as.character(direction)
##bind new columns to data frame
plotdata<-cbind(hwy_df, distance, direction )
##reduce dimensions, keeping date, distance, and direction
plotdata<-plotdata[,c(6,18,19)]
##filter for complete cases
plotdata<-plotdata[complete.cases(plotdata), ]
##define function to strip spaces
trim.leading <- function (x)  sub("^\\s+", "", x)
plotdata$direction <- trim.leading(as.character(plotdata$direction))
#Sign the distance based on direction
for(i in 1:nrow(plotdata)) {if(plotdata$direction[i] =="E" | plotdata$direction[i] =="S") plotdata$distance[i] <- -1*plotdata$distance[i]}
## plot data 2
plotdata2<-hwy_df2$created          ##keep only data column
##data are processed and ready to plot
plotdata2
##this section takes care of a formatting function to ensure the graph range starts on the first of a calendar month
##timeline(plotdata)
rangeYM<- c(plotdata$created[dim(plotdata)[1]], plotdata$created[1])
##index graph to start on first of month
# first decompose into components
d<-as.POSIXlt(rangeYM[1])
e<-unclass(d)
# Then subract appropriate number of days
rangeYM[1]<-rangeYM[1]-e$mday+1
plot(NA,ylim=c(-10,10),xlim=rangeYM,ann=FALSE,axes=FALSE)
abline(h=0,lwd=2,col="dodgerblue4")
ypts <- plotdata$distance
y0pts2 <- rep_len(0, length.out=nrow(plotdata2))
y0pts <- rep_len(0, length.out=nrow(plotdata))
plotdata2
length(plotdata2)
y0pts2 <- rep_len(0, length.out=nrow(plotdata2))
nrow(plotdata2)
plot(NA,ylim=c(-10,10),xlim=rangeYM,ann=FALSE,axes=FALSE)
abline(h=0,lwd=2,col="dodgerblue4")
ypts <- plotdata$distance
y0pts2 <- rep_len(0, length.out=length(plotdata2))
y0pts <- rep_len(0, length.out=nrow(plotdata))
txtpts <- rep_len(c(1,3), length.out=nrow(plotdata))
ylblpts <- ypts
lblpts <- rep_len(c(3,1), length.out=nrow(plotdata))
segments(as.Date(plotdata$created),y0pts,as.Date(plotdata$created),ypts,col="gray80")
axis.Date(
1,
at=seq.Date(rangeYM[1],rangeYM[2],by="month"),
format="%Y-%m",
cex.axis=0.6,
pos=0,
lwd=0,
lwd.tick=2,
col="dodgerblue3",
font=1
)
points(plotdata$created,y=ypts, pch=20, cex=1.5, col="violetred2")
points(plotdata2$created, y = ypts2, pch=19, cex=1, col="lightblue")
title(main=file_name, ylab="miles")
points(plotdata2$created, y = y0pts2, pch=19, cex=1, col="lightblue")
y0pts2
points(plotdata2, y = y0pts2, pch=19, cex=1, col="lightblue")
points(plotdata2, y = y0pts2, pch=19, cex=1, col="blue")
## Rscript for reading twitter logs, cleaning them, adn storing the results as a .csv
## Currently just a straight forward data pull of data.
## You will need to provide your own keys
require(twitteR)
require(ROAuth)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "Ys4tfBmMdPcZT1zCvvInGyQ8a"
consumerSecret <- "t5k5I8kwqDkOiDtYVKgjGbBgZc8FVleGvubezLhD1aVVS0rp4s"
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred$handshake()
readline()
##Should return TRUE is authenticated
## Get the relevant tweet data
source('~/Documents/TripcheckR/TwitterReader.R', echo=TRUE)
source('~/Documents/TripcheckR/TwitterReader.R')
?sdev
?sd
?mutate
?intersect
